// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Connection pooling configuration
  relationMode = "foreignKeys"
  // Add direct connection info for better stability
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  role        String   @default("user") // "admin" or "user"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  experiences Experience[]
  itineraries Itinerary[]
  images      Image[]
  updates     Update[]

  @@map("users")
}

model Experience {
  id          String   @id @default(cuid())
  destination String
  region      String
  title       String
  description String
  highlights  Json     // Array of highlight strings
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@map("experiences")
}

model Itinerary {
  id          String   @id @default(cuid())
  destination String
  region      String
  title       String
  duration    String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  days     ItineraryDay[]

  @@map("itineraries")
}

model ItineraryDay {
  id          String @id @default(cuid())
  dayNumber   Int
  activities  Json   // Array of activity strings

  // Relations
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryId String

  @@map("itinerary_days")
}

model Image {
  id          String   @id @default(cuid())
  destination String
  region      String
  url         String
  caption     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@map("images")
}

model Update {
  id        String   @id @default(cuid())
  type      String   // "announcement", "feature", "maintenance"
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@map("updates")
}
